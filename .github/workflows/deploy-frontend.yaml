# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Frontend → ACR → WebApp

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  DOCKER_CONTEXT: ./frontend/MicroTodoUI
  IMAGE_NAME: microtodoui
  CONTAINER_PORT: 80
  IMAGE_TAG: ${{ github.sha }}
  IMAGE_FULL_SHA: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
  IMAGE_FULL_MAIN: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: ACR login
        run: az acr login --name ${{ secrets.ACR_NAME }}

      - name: Build & Push (ACR)
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.DOCKER_CONTEXT }}
          push: true
          tags: |
            ${{ env.IMAGE_FULL_SHA }}
            ${{ env.IMAGE_FULL_MAIN }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Ensure WebApp managed identity has AcrPull
        shell: bash
        run: |
          set -e
          az webapp identity assign -g "${{ secrets.RESOURCE_GROUP }}" -n "${{ secrets.WEBAPP_NAME }}" >/dev/null
          PRINCIPAL_ID=$(az webapp identity show -g "${{ secrets.RESOURCE_GROUP }}" -n "${{ secrets.WEBAPP_NAME }}" --query principalId -o tsv)
          ACR_ID=$(az acr show -n "${{ secrets.ACR_NAME }}" --query id -o tsv)
          az role assignment create --assignee "$PRINCIPAL_ID" --role acrpull --scope "$ACR_ID" >/dev/null || true

      - name: Deploy container to Web App
        shell: bash
        run: |
          set -e
          az webapp config container set \
            -g "${{ secrets.RESOURCE_GROUP }}" \
            -n "${{ secrets.WEBAPP_NAME }}" \
            --docker-custom-image-name "${{ env.IMAGE_FULL_SHA }}" \
            --docker-registry-server-url "https://${{ secrets.ACR_LOGIN_SERVER }}"

          # Always set WEBSITES_PORT
          az webapp config appsettings set \
            -g "${{ secrets.RESOURCE_GROUP }}" \
            -n "${{ secrets.WEBAPP_NAME }}" \
            --settings WEBSITES_PORT="${{ env.CONTAINER_PORT }}"

          # Conditionally set BACKEND_URL if provided
          if [ -n "${{ secrets.BACKEND_URL }}" ]; then
            az webapp config appsettings set \
              -g "${{ secrets.RESOURCE_GROUP }}" \
              -n "${{ secrets.WEBAPP_NAME }}" \
              --settings BACKEND_URL="${{ secrets.BACKEND_URL }}"
          fi

      - name: Restart Web App
        run: az webapp restart -g "${{ secrets.RESOURCE_GROUP }}" -n "${{ secrets.WEBAPP_NAME }}"

      - name: Show WebApp URL
        run: az webapp show -g "${{ secrets.RESOURCE_GROUP }}" -n "${{ secrets.WEBAPP_NAME }}" --query defaultHostName -o tsv
